import numpy as np

from scipy import signal
import json
    
from math import sin, cos, pi, floor
import matplotlib.pyplot as plt

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM
from tensorflow.keras.layers import Dense

model = Sequential()
model.add(LSTM(10, activation='tanh'))
model.add(Dense(1, activation='tanh'))
model.compile(optimizer='adam', loss='mse')



with open('DROPBEAR_dataset.json') as fp:
    data = json.load(fp)


def getData(x):
    DataList = list()
    for i in data.get(x):
        i = str(i) 
        DataList.append(i)
        
    return DataList


X = getData("acceleration_data")
Y = getData("measured_pin_location")


DataList = list()
for i in range(len(Y)):
    if Y[i].replace('.', '', 1).lstrip('-').isdigit()== True:
        DataList.append(float(Y[i]))
        
    else:
        DataList.append(float(Y[i-1]))

Y = np.array(DataList)


print("acceleration data:", len(X), type(X))
print("measured_pin_location:", len(Y))


def resampled(x, L, M):
    penis = list()
    
    if L>=M:                        #upsampling
        b =int(len(x)*(L/M)+1)
        penis = signal.resample(x, b)
        
    else:                            #downsampling
        b = int(len(x)/M + 1)
        penis = signal.resample(x, b)

    return penis


X = resampled(X, 1, 8)
Y= resampled(Y, 1806, 239)

smallest = floor((len(X))*.99)
X = X[0:(smallest)]
Y = Y[0:(smallest)]

train_seq = Y

mu_x = np.mean(X)
mu_y = np.mean(Y)
sig_x = np.std(X)
sig_y = np.std(Y)
X_standardized = (X - mu_x) / sig_x;
Y_standardized = (Y - mu_y) / sig_y;





#xaxis = np.arange(-50*np.pi, 50*np.pi, 0.1)
#def train_function(x):
#    return np.sin(x)



Xlist, ylist = list(), list()
n_steps= 200
for i in range(len(X_standardized)):
    
    endVariable= i + n_steps

    if endVariable> len(X_standardized)-1:
        break
    seqX = X_standardized[i:endVariable]
    seqy = Y_standardized[endVariable]
    Xlist.append(seqX)
    ylist.append(seqy)


X_standardized = np.array(Xlist)   
Y_standardized = np.array(ylist)


plt.plot(range(len(X_standardized)), X_standardized, 'blue')
plt.ylabel('accel')
plt.title('Vibration')
plt.xlabel('Time')
plt.show()

plt.plot(range(len(Y_standardized))[n_steps:], Y_standardized[n_steps:], 'blue')
plt.plot(range(len(Y_standardized))[:n_steps], Y_standardized[:n_steps], 'red')
plt.ylabel('Pin Location ')
plt.title('Pin Position')
plt.xlabel('Time')
plt.show()

X_standardized = X_standardized.reshape((X_standardized.shape[0], X_standardized.shape[1], 1))
history = model.fit(X_standardized, Y_standardized, epochs=30, verbose=1)
plt.plot(history.history['loss'], label="loss")
plt.legend(loc="upper right")
plt.show()




#test_xaxis = np.arange(0, 10*np.pi, 0.1)
#def test_function(x):
#    return np.cos(x)
#calc_y = test_function(test_xaxis)
# start with initial n values, rest will be predicted
test_y = train_seq[:n_steps]


for i in range( len(train_seq) - n_steps ):
    net_input = test_y[i : i + n_steps]
   
    net_input = net_input.reshape((1, n_steps, 1))
    
    y = model.predict(net_input, verbose=0)
    test_y = np.append(test_y, y)

ypred = (test_y * sig_y) + mu_y

plt.plot(range(len(train_seq))[n_steps:], ypred[n_steps:], label="predicitons")
plt.plot(range(len(train_seq)), train_seq, label="ground truth")
plt.plot(range(len(train_seq))[:n_steps], ypred[:n_steps], label="initial sequence", color="red")
plt.legend(loc='upper left')
plt.ylim(0, .2)

plt.show()
#print(test_xaxis[:n_steps])
