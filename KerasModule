import numpy as np
from math import sin, cos
import matplotlib.pyplot as plt
#import pandas as pd
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM
from tensorflow.keras.layers import Dense


model = Sequential()
model.add(LSTM(10, activation='tanh'))
model.add(Dense(1, activation='tanh'))
model.compile(optimizer='adam', loss='mse')




xaxis = np.arange(0, 20, 0.1)
Xlist, ylist, sequence = list(), list(), list()
for i in xaxis:
    sequence.append(sin(i))


plt.plot(xaxis, sequence, color= 'red')
plt.show()


for i in range(len(sequence)):
    n_steps= 20
    endVariable= i + n_steps

    if endVariable> len(sequence)-1:
        break
    seqX = sequence[i:endVariable]
    seqy = sequence[endVariable]
    Xlist.append(seqX)
    ylist.append(seqy)

X = np.array(Xlist)   
y = np.array(ylist)
X = X.reshape((X.shape[0], X.shape[1], 1))

print(X.shape)
print(y.shape)

history = model.fit(X, y, epochs=20, verbose=1)
plt.plot(history.history['loss'], label="loss")
plt.legend(loc="upper right")
plt.show()

#prediction = model.predict(X, verbose = 0)
#plt.plot(xaxis[0:180], prediction)
#print(prediction)



Testinput, TestSequence = list(), list()
TestAxis= np.arange(0, 20, 0.1)

for i in TestAxis:
    TestSequence.append(cos(i))


for i in range(len(TestSequence) - n_steps):
    Testseq = TestSequence[i:(i+n_steps)]
    Testinput.append(Testseq)

                                 
Testinput= np.array(Testinput)
Testinput = Testinput.reshape((Testinput.shape[0], n_steps, 1))     

prediction = model.predict(Testinput, verbose = 0)
plt.plot(TestAxis[0:180], prediction)
print(prediction)
